require('dotenv').config();
const express = require('express');
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;
const API_KEY = process.env.API_KEY || 'qf4iqoxskcv8dbpp';
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || '7816438293:AAFMT4tP5yc81cDczATVlAG3zeXVlrGFmHs';
const CHAT_ID = process.env.CHAT_ID || '-1002751995841';

const bot = new TelegramBot(TELEGRAM_TOKEN, {polling: false});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
async function getUpcomingMatches() {
  try {
    const response = await axios.get(`https://api.sstats.net/games/list?upcoming=true&limit=100`, {
      headers: {
        'apikey': API_KEY
      }
    });
    return response.data.data || [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
async function getMatchOdds(matchId, opening = false) {
  try {
    const response = await axios.get(`https://api.sstats.net/odds/${matchId}?opening=${opening}`, {
      headers: {
        'apikey': API_KEY
      }
    });
    return response.data.data || [];
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ ${matchId}:`, error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ "–ü–æ–±–µ–¥–∞" (Match Winner)
function findMatchWinnerOdds(oddsData) {
  if (!oddsData || !oddsData.length) return null;
  
  for (const bookmaker of oddsData) {
    for (const market of bookmaker.odds) {
      if (market.marketName.toLowerCase().includes('match winner') || 
          market.marketName.toLowerCase().includes('1x2')) {
        return market.odds.find(odd => odd.name === '1')?.value || null;
      }
    }
  }
  return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function monitorOddsChanges() {
  console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤...');
  
  const matches = await getUpcomingMatches();
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${matches.length} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π`);
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
  const matchesWithOdds = [];
  
  for (const match of matches) {
    if (match.odds && match.odds.length > 0) {
      matchesWithOdds.push(match);
    }
  }
  
  console.log(`–ò–∑ –Ω–∏—Ö ${matchesWithOdds.length} —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
  for (const match of matchesWithOdds) {
    const openingOddsData = await getMatchOdds(match.id, true);
    const currentOddsData = match.odds;
    
    const openingOdds = findMatchWinnerOdds(openingOddsData);
    const currentOdds = findMatchWinnerOdds(currentOddsData);
    
    if (openingOdds && currentOdds) {
      const diffPercentage = ((currentOdds - openingOdds) / openingOdds) * 100;
      
      if (Math.abs(diffPercentage) > 10) {
        const message = `üìä –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤!\n\n` +
                        `‚öΩ ${match.homeTeam.name} vs ${match.awayTeam.name}\n` +
                        `üìÖ ${new Date(match.date).toLocaleString()}\n\n` +
                        `–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –ø–æ–±–µ–¥—É ${match.homeTeam.name}:\n` +
                        `–û—Ç–∫—Ä—ã—Ç–∏–µ: ${openingOdds.toFixed(2)}\n` +
                        `–¢–µ–∫—É—â–∏–π: ${currentOdds.toFixed(2)}\n` +
                        `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${diffPercentage > 0 ? '+' : ''}${diffPercentage.toFixed(2)}%`;
        
        console.log(message);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try {
          await bot.sendMessage(CHAT_ID, message);
          console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error.message);
        }
      }
    }
  }
  
  console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –†–æ—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä—É—á–Ω—É—é
app.get('/monitor', async (req, res) => {
  try {
    await monitorOddsChanges();
    res.json({status: 'success', message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω'});
  } catch (error) {
    res.status(500).json({status: 'error', message: error.message});
  }
});

// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.get('/matches', async (req, res) => {
  try {
    const matches = await getUpcomingMatches();
    const matchesWithOdds = matches.filter(match => match.odds && match.odds.length > 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö
    const enrichedMatches = await Promise.all(matchesWithOdds.map(async match => {
      const openingOddsData = await getMatchOdds(match.id, true);
      const openingOdds = findMatchWinnerOdds(openingOddsData);
      const currentOdds = findMatchWinnerOdds(match.odds);
      
      let diffPercentage = null;
      if (openingOdds && currentOdds) {
        diffPercentage = ((currentOdds - openingOdds) / openingOdds) * 100;
      }
      
      return {
        ...match,
        openingOdds,
        currentOdds,
        diffPercentage
      };
    }));
    
    res.json({status: 'success', data: enrichedMatches});
  } catch (error) {
    res.status(500).json({status: 'error', message: error.message});
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  monitorOddsChanges();
  
  // –ò –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  setInterval(monitorOddsChanges, 30 * 60 * 1000);
});
